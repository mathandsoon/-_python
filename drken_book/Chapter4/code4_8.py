#フィボナッチ数列を求める再帰関数のメモ化

"""<code4.8の直前の注2について>
pythonでは気にする必要なしです。
ただし、この注の内容が玄人にとっては
pythonの挙動でいやな部分らしいです。
詳しい話は「参照渡し」について調べてみてください。
これに加えてミュータブルオブジェクトとイミュータブルオブジェクト
について理解できれば、なぜpythonで気にする必要がないことが理解できますが、
難しい内容なので、別に踏み込まなくてもいいです。"""

#fibo(N)の答えをメモ化する配列
memo=[]

def fibo(N):
    #ベースケース
    if N==0: return 0
    elif N==1: return 1

    #メモをチェック（すでに計算済みならば答えをリターンする）
    if memo[N]!=-1: return memo[N]

    #答えをメモ化しながら再帰呼び出し
    """と書いているが、Pythonでは同時に処理を書けないので2行に分けた"""
    memo[N]=fibo(N-1)+fibo(N-2)
    return memo[N]

#メモ化用配列を-1で初期化する
"""極力元のコードに近い形で書いているため、
Pythonで書くと初期化している感がない。(なのでclass使うか迷った。)
別に先に下の処理を最初のmemoの変数宣言のときに施しておいてもよい。"""
memo=[-1 for _ in range(50)]

#fibo(49)を呼び出す
fibo(49)

#memo[0], ... , memo[49]に答えが格納されている
for N in range(2,50):
    print("{} 項目: {}".format(N,memo[N]))